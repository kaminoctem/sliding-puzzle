{"version":3,"sources":["phaser/SceneKey.ts","phaser/scenes/Preload.ts","phaser/assets/images/sliding-puzzle-background-1.png","phaser/assets/images/sliding-puzzle-background-2.png","phaser/assets/images/sliding-puzzle-background-3.png","phaser/components/Button.ts","phaser/components/MessageBox.ts","phaser/scenes/SlidingPuzzle.ts","phaser/SlidingPuzzleGame.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sceneSettingConfig","key","SceneKey","active","Preload","nextSceneKey","nextSceneData","data","this","cameras","main","setBackgroundColor","scene","start","Phaser","Scene","initialProps","align","fontSize","fontFamily","textColor","textOverColor","textDownColor","textUpColor","buttonColor","buttonOverColor","buttonDownColor","buttonUpColor","buttonAlpha","borderColor","borderAlpha","Button","props","margedProps","x","y","text","container","add","existing","setSize","width","height","setInteractive","useHandCursor","alignLeft","color","setOrigin","setPadding","setColor","rectangle","setStrokeStyle","on","updateButton","tweens","targets","scaleX","scaleY","duration","yoyo","repeat","ease","onClick","message","containerColor","undefined","setFillStyle","GameObjects","Container","backgroundColor","backgroundAlpha","MessageBox","spritesheetKey1","spritesheetKey2","spritesheetKey3","slidingPuzzleBackgroundConfig","frameWidth","frameHeight","margin","textStyle","IMAGE_KEYS","millisecondsToTime","milliseconds","parseInt","seconds","Math","floor","minutes","hours","minutesString","secondsString","SlidingPuzzle","localTimer","timerText","timerMs","moveCount","moveCountText","startButton","screenButton","messageBox","closeMessageBoxButton","group","load","spritesheet","SlidingPuzzleBackground1","SlidingPuzzleBackground2","SlidingPuzzleBackground3","createStartButton","createScreenButton","time","delta","piece","pointer","localX","localY","event","checkComplete","movePiece","addMoveCount","stopTimer","createMessageBox","destroy","spritesheetKeyIndex","random","length","frame","pieceX","pieceY","create","initialPositionX","initialPositionY","currentPositionX","currentPositionY","pieceHandleInputDown","shufflePieces","timerEventConfig","delay","loop","startAt","timeScale","callback","getElapsed","reset","addEvent","paused","resetMoveCount","createPuzzle","startTimer","scale","isFullscreen","stopFullscreen","startFullscreen","children","getChildren","i","count","randomIndex","blank","pieceCanMove","positionX","positionY","Easing","Linear","up","getPiece","down","left","right","element","gameCongig","type","AUTO","parent","mode","Scale","ScaleModes","FIT","autoCenter","Center","CENTER_HORIZONTALLY","zoom","Zoom","MAX_ZOOM","SlidingPuzzleGame","Game","App","useState","setState","useEffect","game","className","href","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b5a71d8.chunk.js","sourcesContent":["export const PRELOAD: string = \"preload\";\r\nexport const SLIDING_PUZZLE: string = \"sliding_puzzle\";\r\nexport default { PRELOAD, SLIDING_PUZZLE };\r\n","import Phaser from \"phaser\";\r\nimport SceneKey from \"../SceneKey\";\r\n\r\nconst sceneSettingConfig: Phaser.Types.Scenes.SettingsConfig = {\r\n  key: SceneKey.PRELOAD,\r\n  active: true,\r\n};\r\n\r\nexport default class Preload extends Phaser.Scene {\r\n  private nextSceneKey: string;\r\n  private nextSceneData: object;\r\n\r\n  constructor() {\r\n    super(sceneSettingConfig);\r\n    this.nextSceneKey = \"\";\r\n    this.nextSceneData = {};\r\n  }\r\n\r\n  init(data: any): void {\r\n    this.nextSceneKey = data.nextSceneKey;\r\n    this.nextSceneData = data.nextSceneData;\r\n  }\r\n\r\n  preload(): void {\r\n  }\r\n\r\n  create(data: any): void {\r\n    this.cameras.main.setBackgroundColor(\"#000000\");\r\n    this.scene.start(this.nextSceneKey, this.nextSceneData);\r\n  }\r\n\r\n  update(): void {\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/sliding-puzzle-background-1.d713769f.png\";","export default __webpack_public_path__ + \"static/media/sliding-puzzle-background-2.351822e2.png\";","export default __webpack_public_path__ + \"static/media/sliding-puzzle-background-3.f4ed29eb.png\";","import Phaser from \"phaser\";\r\n\r\nconst initialProps = {\r\n  align: \"center\",\r\n  fontSize: \"16px\",\r\n  fontFamily: \"Segoe UI\",\r\n  textColor: \"black\",\r\n  textOverColor: \"black\",\r\n  textDownColor: \"black\",\r\n  textUpColor: \"black\",\r\n  buttonColor: 0x888888,\r\n  buttonOverColor: 0x777777,\r\n  buttonDownColor: 0x666666,\r\n  buttonUpColor: 0x555555,\r\n  buttonAlpha: 1,\r\n  borderColor: 0x888888,\r\n  borderAlpha: 1,\r\n};\r\n\r\nexport default class Button extends Phaser.GameObjects.Container {\r\n  private text: Phaser.GameObjects.Text;\r\n  private container: Phaser.GameObjects.Rectangle;\r\n\r\n  constructor(props: ButtonProps) {\r\n    const margedProps = { ...initialProps, ...props };\r\n    super(margedProps.scene, margedProps.x, margedProps.y);\r\n\r\n    this.scene = margedProps.scene;\r\n    this.scene.add.existing(this);\r\n\r\n    this.setSize(margedProps.width, margedProps.height);\r\n    this.setInteractive({ useHandCursor: true });\r\n\r\n    const alignLeft = margedProps.align === \"left\";\r\n\r\n    this.text = this.scene.add\r\n      .text(alignLeft ? -margedProps.width / 2 + 0 : 0, -1, margedProps.text, {\r\n        align: margedProps.align,\r\n        fontSize: margedProps.fontSize,\r\n        color: margedProps.textColor,\r\n        fontFamily: margedProps.fontFamily,\r\n      })\r\n      .setOrigin(alignLeft ? 0 : 0.5, 0.5)\r\n      .setPadding(0, 2, 0, 0);\r\n    if (props.textColor) {\r\n      this.text.setColor(props.textColor);\r\n    }\r\n\r\n    this.container = margedProps.scene.add.rectangle(\r\n      0,\r\n      0,\r\n      margedProps.width,\r\n      margedProps.height,\r\n      margedProps.buttonColor,\r\n      margedProps.buttonAlpha\r\n    );\r\n    this.container\r\n      .setStrokeStyle(1, margedProps.borderColor)\r\n      .setOrigin(alignLeft ? 0 : 0.5, 0.5);\r\n\r\n    this.add([this.container, this.text]);\r\n\r\n    this.on(\"pointerover\", () => {\r\n      this.updateButton(\r\n        \"pointer over\",\r\n        margedProps.textOverColor,\r\n        margedProps.buttonOverColor\r\n      );\r\n    });\r\n\r\n    this.on(\"pointerout\", () => {\r\n      this.updateButton(\"pointer out\", margedProps.textColor, margedProps.buttonColor);\r\n    });\r\n\r\n    this.on(\"pointerdown\", () => {\r\n      this.updateButton(\r\n        \"pointer down\",\r\n        margedProps.textDownColor,\r\n        margedProps.buttonDownColor\r\n      );\r\n      this.scene.tweens.add({\r\n        targets: this,\r\n        scaleX: 1.1,\r\n        scaleY: 1.1,\r\n        duration: 100,\r\n        yoyo: true,\r\n        repeat: 0,\r\n        ease: \"Sine.easeInOut\",\r\n      });\r\n    });\r\n\r\n    this.on(\"pointerup\", () => {\r\n      this.updateButton(\"pointer up\", margedProps.textUpColor, margedProps.buttonUpColor);\r\n      margedProps.onClick();\r\n    });\r\n  }\r\n\r\n  updateButton(\r\n    message: string,\r\n    textColor: string,\r\n    containerColor?: number | undefined\r\n  ): void {\r\n    this.text.setColor(textColor);\r\n    if (containerColor !== undefined) {\r\n      this.container.setFillStyle(containerColor);\r\n    }\r\n  }\r\n}\r\n\r\ninterface ButtonProps {\r\n  scene: Phaser.Scene;\r\n  x: number;\r\n  y: number;\r\n  text: string;\r\n  width: number;\r\n  height: number;\r\n  align?: \"center\" | \"left\" | \"right\" | \"justify\";\r\n  fontSize?: string;\r\n  fontFamily?: string | undefined;\r\n  textColor?: string;\r\n  textOverColor?: string;\r\n  textDownColor?: string;\r\n  textUpColor?: string;\r\n  buttonColor?: number | undefined;\r\n  buttonOverColor?: number | undefined;\r\n  buttonDownColor?: number | undefined;\r\n  buttonUpColor?: number | undefined;\r\n  buttonAlpha?: number | undefined;\r\n  borderColor?: number | undefined;\r\n  borderAlpha?: number | undefined;\r\n  onClick: () => void;\r\n}\r\n","import Phaser from \"phaser\";\r\n\r\nconst initialProps = {\r\n  align: \"center\",\r\n  fontSize: \"16px\",\r\n  fontFamily: \"Segoe UI\",\r\n  textColor: \"black\",\r\n  backgroundColor: 0xffffff,\r\n  backgroundAlpha: 1,\r\n  borderColor: 0x888888,\r\n  borderAlpha: 1,\r\n};\r\n\r\nexport default class MessageBox extends Phaser.GameObjects.Container {\r\n  private text: Phaser.GameObjects.Text;\r\n  private container: Phaser.GameObjects.Rectangle;\r\n\r\n  constructor(props: MessageBoxProps) {\r\n    const margedProps = { ...initialProps, ...props };\r\n    super(margedProps.scene, margedProps.x, margedProps.y);\r\n\r\n    this.scene = margedProps.scene;\r\n    this.scene.add.existing(this);\r\n\r\n    this.setSize(margedProps.width, margedProps.height);\r\n\r\n    const alignLeft = margedProps.align === \"left\";\r\n\r\n    this.text = this.scene.add\r\n      .text(alignLeft ? -margedProps.width / 2 + 0 : 0, -1, margedProps.text, {\r\n        align: margedProps.align,\r\n        fontSize: margedProps.fontSize,\r\n        color: margedProps.textColor,\r\n        fontFamily: margedProps.fontFamily,\r\n      })\r\n      .setOrigin(alignLeft ? 0 : 0.5, 0.5)\r\n      .setPadding(0, 0, 0, 0);\r\n\r\n    if (props.textColor) {\r\n      this.text.setColor(props.textColor);\r\n    }\r\n  \r\n    this.container = this.scene.add.rectangle(\r\n      0,\r\n      0,\r\n      margedProps.width,\r\n      margedProps.height,\r\n      margedProps.backgroundColor,\r\n      margedProps.backgroundAlpha\r\n    );\r\n    this.container\r\n      .setStrokeStyle(1, margedProps.borderColor)\r\n      .setOrigin(alignLeft ? 0 : 0.5, 0.5);\r\n\r\n    this.add(this.container);\r\n    this.add(this.text);\r\n  }\r\n}\r\n\r\ninterface MessageBoxProps {\r\n  scene: Phaser.Scene;\r\n  x: number;\r\n  y: number;\r\n  text: string;\r\n  width: number;\r\n  height: number;\r\n  align?: \"center\" | \"left\" | \"right\" | \"justify\";\r\n  fontSize?: string;\r\n  fontFamily?: string | undefined;\r\n  textColor?: string;\r\n  backgroundColor?: number | undefined;\r\n  backgroundAlpha?: number | undefined;\r\n  borderColor?: number | undefined;\r\n  borderAlpha?: number | undefined;\r\n}\r\n","import Phaser from \"phaser\";\r\nimport SceneKey from \"../SceneKey\";\r\nimport SlidingPuzzleBackground1 from \"../assets/images/sliding-puzzle-background-1.png\";\r\nimport SlidingPuzzleBackground2 from \"../assets/images/sliding-puzzle-background-2.png\";\r\nimport SlidingPuzzleBackground3 from \"../assets/images/sliding-puzzle-background-3.png\";\r\nimport Button from \"../components/Button\";\r\nimport Piece from \"../models/Piece\";\r\nimport MessageBox from \"../components/MessageBox\";\r\n\r\nconst spritesheetKey1 = \"background1\";\r\nconst spritesheetKey2 = \"background2\";\r\nconst spritesheetKey3 = \"background3\";\r\n\r\nconst slidingPuzzleBackgroundConfig: Phaser.Types.Loader.FileTypes.ImageFrameConfig =\r\n  {\r\n    frameWidth: 180,\r\n    frameHeight: 180,\r\n    margin: 0,\r\n  };\r\n\r\nconst textStyle: Phaser.Types.GameObjects.Text.TextStyle = {\r\n  fontFamily: \"New Tegomin\",\r\n  fontSize: \"32px\",\r\n  color: \"#5755d9\",\r\n};\r\n\r\nconst IMAGE_KEYS = [spritesheetKey1, spritesheetKey2, spritesheetKey3];\r\n\r\nconst ROW_COUNT: number = 4;\r\nconst COL_COUNT: number = 4;\r\n\r\nexport function millisecondsToTime(duration: number): string {\r\n  const milliseconds = parseInt(`${(duration % 1000) / 100}`);\r\n  const seconds = Math.floor((duration / 1000) % 60);\r\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\r\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n\r\n  const hoursString = hours < 10 ? \"0\" + hours : hours;\r\n  const minutesString = minutes < 10 ? \"0\" + minutes : minutes;\r\n  const secondsString = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n  return `${hoursString}:${minutesString}:${secondsString}.${milliseconds}`;\r\n}\r\n\r\nexport default class SlidingPuzzle extends Phaser.Scene {\r\n  private localTimer: Phaser.Time.TimerEvent | undefined;\r\n  private timerText: Phaser.GameObjects.Text | undefined;\r\n  private timerMs: number;\r\n  private moveCount: number;\r\n  private moveCountText: Phaser.GameObjects.Text | undefined;\r\n  private startButton: Button | undefined;\r\n  private screenButton: Button | undefined;\r\n  private messageBox: MessageBox | undefined;\r\n  private closeMessageBoxButton: Button | undefined;\r\n  private group: Phaser.GameObjects.Group | undefined;\r\n\r\n  constructor() {\r\n    super({\r\n      key: SceneKey.SLIDING_PUZZLE,\r\n      active: false,\r\n    });\r\n    this.timerMs = 0;\r\n    this.moveCount = 0;\r\n  }\r\n\r\n  init(data: any): void {}\r\n\r\n  preload(): void {\r\n    this.load.spritesheet(\r\n      spritesheetKey1,\r\n      SlidingPuzzleBackground1,\r\n      slidingPuzzleBackgroundConfig\r\n    );\r\n    this.load.spritesheet(\r\n      spritesheetKey2,\r\n      SlidingPuzzleBackground2,\r\n      slidingPuzzleBackgroundConfig\r\n    );\r\n    this.load.spritesheet(\r\n      spritesheetKey3,\r\n      SlidingPuzzleBackground3,\r\n      slidingPuzzleBackgroundConfig\r\n    );\r\n  }\r\n\r\n  create(data: any): void {\r\n    this.cameras.main.setBackgroundColor(\"#303742\");\r\n    this.createStartButton(\"Start!\");\r\n\r\n    this.createScreenButton(\"startFullscreen\");\r\n  }\r\n\r\n  update(time: number, delta: number): void {}\r\n\r\n  pieceHandleInputDown(\r\n    piece: Piece,\r\n    pointer: Phaser.Input.Pointer,\r\n    localX: number,\r\n    localY: number,\r\n    event: any\r\n  ): void {\r\n    if (this.checkComplete()) {\r\n      return;\r\n    }\r\n\r\n    if (this.movePiece(piece)) {\r\n      this.addMoveCount();\r\n    }\r\n\r\n    if (this.checkComplete()) {\r\n      this.stopTimer();\r\n      this.createMessageBox(\r\n        `Time: ${millisecondsToTime(this.timerMs)}\\nMove Count: ${\r\n          this.moveCount\r\n        }\\nCongratulation!`\r\n      );\r\n    }\r\n  }\r\n\r\n  createPuzzle(): void {\r\n    if (this.group) {\r\n      this.group.destroy(true, false);\r\n    }\r\n    this.group = this.add.group();\r\n\r\n    const spritesheetKeyIndex = Math.floor(Math.random() * IMAGE_KEYS.length);\r\n\r\n    let frame = 0;\r\n    for (let y = 0; y < ROW_COUNT; y++) {\r\n      for (let x = 0; x < COL_COUNT; x++) {\r\n        const frameWidth = slidingPuzzleBackgroundConfig.frameWidth;\r\n        const frameHeight = slidingPuzzleBackgroundConfig.frameHeight\r\n          ? slidingPuzzleBackgroundConfig.frameHeight\r\n          : 0;\r\n\r\n        const pieceX = x * frameWidth + frameWidth / 2;\r\n\r\n        const pieceY = y * frameHeight + frameHeight / 2;\r\n\r\n        if (x === 0 && y === 0) {\r\n          const piece = this.group.create(\r\n            pieceX,\r\n            pieceY,\r\n            IMAGE_KEYS[spritesheetKeyIndex],\r\n            frame,\r\n            false\r\n          );\r\n          piece.initialPositionX = x;\r\n          piece.initialPositionY = y;\r\n          piece.currentPositionX = x;\r\n          piece.currentPositionY = y;\r\n          frame++;\r\n          continue;\r\n        }\r\n\r\n        const piece: Piece = this.group.create(\r\n          pieceX,\r\n          pieceY,\r\n          IMAGE_KEYS[spritesheetKeyIndex],\r\n          frame\r\n        );\r\n\r\n        piece.initialPositionX = x;\r\n        piece.initialPositionY = y;\r\n        piece.currentPositionX = x;\r\n        piece.currentPositionY = y;\r\n        piece\r\n          .setInteractive()\r\n          .on(\r\n            \"pointerdown\",\r\n            (\r\n              pointer: Phaser.Input.Pointer,\r\n              localX: number,\r\n              localY: number,\r\n              event: any\r\n            ) =>\r\n              this.pieceHandleInputDown(piece, pointer, localX, localY, event),\r\n            this\r\n          );\r\n\r\n        frame++;\r\n      }\r\n    }\r\n    this.shufflePieces();\r\n  }\r\n\r\n  resetMoveCount(): void {\r\n    this.moveCount = 0;\r\n    if (this.moveCountText) {\r\n      this.moveCountText.destroy();\r\n    }\r\n\r\n    this.moveCountText = this.add.text(\r\n      840,\r\n      440,\r\n      `Move Count: ${this.moveCount}`,\r\n      textStyle\r\n    );\r\n  }\r\n\r\n  addMoveCount(): void {\r\n    this.moveCount++;\r\n    if (this.moveCountText) {\r\n      this.moveCountText.text = `Move Count: ${this.moveCount}`;\r\n    }\r\n  }\r\n\r\n  startTimer(): void {\r\n    this.timerMs = 0;\r\n\r\n    if (this.timerText) {\r\n      this.timerText.destroy();\r\n    }\r\n\r\n    this.timerText = this.add.text(\r\n      840,\r\n      400,\r\n      `Time: ${millisecondsToTime(this.timerMs)}`,\r\n      textStyle\r\n    );\r\n\r\n    const timerEventConfig: Phaser.Types.Time.TimerEventConfig = {\r\n      delay: 100,\r\n      loop: true,\r\n      startAt: 0,\r\n      timeScale: 1,\r\n      callback: () => {\r\n        if (!this.localTimer || !this.timerText) {\r\n          return;\r\n        }\r\n        this.timerMs += this.localTimer.getElapsed();\r\n        this.timerText.text = `Time: ${millisecondsToTime(this.timerMs)}`;\r\n      },\r\n    };\r\n\r\n    if (this.localTimer) {\r\n      this.localTimer.reset(timerEventConfig);\r\n    } else {\r\n      this.localTimer = this.time.addEvent(timerEventConfig);\r\n    }\r\n  }\r\n\r\n  stopTimer(): void {\r\n    if (!this.localTimer) {\r\n      return;\r\n    }\r\n    this.localTimer.paused = true;\r\n  }\r\n\r\n  createStartButton(text: string): void {\r\n    if (this.startButton) {\r\n      this.startButton.destroy(true);\r\n    }\r\n    this.startButton = new Button({\r\n      scene: this,\r\n      borderColor: 0x3634d2,\r\n      buttonColor: 0x4240d4,\r\n      buttonOverColor: 0x4240d4,\r\n      buttonDownColor: 0x3a38d2,\r\n      buttonUpColor: 0x4240d4,\r\n      textColor: \"#ffffff\",\r\n      textDownColor: \"#ffffff\",\r\n      textOverColor: \"#ffffff\",\r\n      textUpColor: \"#ffffff\",\r\n      fontSize: \"32px\",\r\n      height: 90,\r\n      width: 360,\r\n      text: text,\r\n      x: 1000,\r\n      y: 90,\r\n      onClick: () => {\r\n        this.resetMoveCount();\r\n        this.createPuzzle();\r\n        this.createStartButton(\"Re:start!\");\r\n        this.startTimer();\r\n      },\r\n    });\r\n  }\r\n\r\n  createScreenButton(text: string): void {\r\n    if (this.screenButton) {\r\n      this.screenButton.destroy(true);\r\n    }\r\n    this.screenButton = new Button({\r\n      scene: this,\r\n      borderColor: 0x3634d2,\r\n      buttonColor: 0x4240d4,\r\n      buttonOverColor: 0x4240d4,\r\n      buttonDownColor: 0x3a38d2,\r\n      buttonUpColor: 0x4240d4,\r\n      textColor: \"#ffffff\",\r\n      textDownColor: \"#ffffff\",\r\n      textOverColor: \"#ffffff\",\r\n      textUpColor: \"#ffffff\",\r\n      fontSize: \"32px\",\r\n      height: 90,\r\n      width: 360,\r\n      text: text,\r\n      x: 1000,\r\n      y: 200,\r\n      onClick: () => {\r\n        if (this.scale.isFullscreen) {\r\n          this.scale.stopFullscreen();\r\n          this.createScreenButton(\"startFullscreen\");\r\n          return;\r\n        }\r\n        this.scale.startFullscreen();\r\n        this.createScreenButton(\"stopFullscreen\");\r\n      },\r\n    });\r\n  }\r\n\r\n  createMessageBox(text: string): void {\r\n    if (this.messageBox) {\r\n      this.messageBox.destroy(true);\r\n    }\r\n    if (this.closeMessageBoxButton) {\r\n      this.closeMessageBoxButton.destroy(true);\r\n    }\r\n\r\n    this.messageBox = new MessageBox({\r\n      scene: this,\r\n      textColor: \"#32384d\",\r\n      fontSize: \"32px\",\r\n      text: text,\r\n      height: 700,\r\n      width: 1000,\r\n      x: 640,\r\n      y: 360,\r\n    });\r\n    this.closeMessageBoxButton = new Button({\r\n      scene: this,\r\n      borderColor: 0x3634d2,\r\n      buttonColor: 0x4240d4,\r\n      buttonOverColor: 0x4240d4,\r\n      buttonDownColor: 0x3a38d2,\r\n      buttonUpColor: 0x4240d4,\r\n      textColor: \"#ffffff\",\r\n      textDownColor: \"#ffffff\",\r\n      textOverColor: \"#ffffff\",\r\n      textUpColor: \"#ffffff\",\r\n      fontSize: \"48px\",\r\n      text: \"Close\",\r\n      height: 90,\r\n      width: 360,\r\n      x: 640,\r\n      y: 540,\r\n      onClick: () => {\r\n        if (this.messageBox) {\r\n          this.messageBox.destroy(true);\r\n        }\r\n        if (this.closeMessageBoxButton) {\r\n          this.closeMessageBoxButton.destroy(true);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  checkComplete(): boolean {\r\n    if (!this.group) {\r\n      return false;\r\n    }\r\n    const children = this.group.getChildren();\r\n    for (let i = 0; i < children.length; i++) {\r\n      const piece = children[i] as Piece;\r\n      if (\r\n        piece.initialPositionX !== piece.currentPositionX ||\r\n        piece.initialPositionY !== piece.currentPositionY\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  shufflePieces(): void {\r\n    if (!this.group) {\r\n      return;\r\n    }\r\n    const shuffleCount: number = 256;\r\n    let count: number = 0;\r\n    while (count < shuffleCount) {\r\n      const children = this.group.getChildren();\r\n      const randomIndex = Math.floor(Math.random() * children.length);\r\n      if (this.movePiece(children[randomIndex] as Piece)) {\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n\r\n  movePiece(piece: Piece): boolean {\r\n    const blank = this.pieceCanMove(piece);\r\n    if (!blank) {\r\n      return false;\r\n    }\r\n\r\n    const positionX = piece.currentPositionX;\r\n    const positionY = piece.currentPositionY;\r\n\r\n    piece.currentPositionX = blank.currentPositionX;\r\n    piece.currentPositionY = blank.currentPositionY;\r\n    blank.currentPositionX = positionX;\r\n    blank.currentPositionY = positionY;\r\n\r\n    const frameWidth = slidingPuzzleBackgroundConfig.frameWidth;\r\n    const frameHeight = slidingPuzzleBackgroundConfig.frameHeight\r\n      ? slidingPuzzleBackgroundConfig.frameHeight\r\n      : 0;\r\n\r\n    const pieceTween = this.tweens.add({\r\n      targets: piece,\r\n      x: piece.currentPositionX * frameWidth + frameWidth / 2,\r\n      y: piece.currentPositionY * frameHeight + frameHeight / 2,\r\n      duration: 100,\r\n      ease: Phaser.Math.Easing.Linear(0),\r\n    });\r\n\r\n    const blankTween = this.tweens.add({\r\n      targets: blank,\r\n      x: blank.currentPositionX * frameWidth + frameWidth / 2,\r\n      y: blank.currentPositionY * frameHeight + frameHeight / 2,\r\n      ease: Phaser.Math.Easing.Linear(0),\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  pieceCanMove(piece: Piece): Piece | undefined {\r\n    const up = this.getPiece(\r\n      piece.currentPositionX,\r\n      piece.currentPositionY - 1\r\n    );\r\n    if (\r\n      up !== undefined &&\r\n      up.initialPositionX === 0 &&\r\n      up.initialPositionY === 0\r\n    ) {\r\n      return up;\r\n    }\r\n\r\n    const down = this.getPiece(\r\n      piece.currentPositionX,\r\n      piece.currentPositionY + 1\r\n    );\r\n    if (\r\n      down !== undefined &&\r\n      down.initialPositionX === 0 &&\r\n      down.initialPositionY === 0\r\n    ) {\r\n      return down;\r\n    }\r\n\r\n    const left = this.getPiece(\r\n      piece.currentPositionX - 1,\r\n      piece.currentPositionY\r\n    );\r\n    if (\r\n      left !== undefined &&\r\n      left.initialPositionX === 0 &&\r\n      left.initialPositionY === 0\r\n    ) {\r\n      return left;\r\n    }\r\n\r\n    const right = this.getPiece(\r\n      piece.currentPositionX + 1,\r\n      piece.currentPositionY\r\n    );\r\n    if (\r\n      right !== undefined &&\r\n      right.initialPositionX === 0 &&\r\n      right.initialPositionY === 0\r\n    ) {\r\n      return right;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  getPiece(x: number, y: number): Piece | undefined {\r\n    if (!this.group) {\r\n      return undefined;\r\n    }\r\n    const children = this.group.getChildren();\r\n    for (let i = 0; i < children.length; i++) {\r\n      const element = children[i] as Piece;\r\n      if (element.currentPositionX === x && element.currentPositionY === y) {\r\n        return element;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n","import Phaser from \"phaser\";\r\nimport Preload from \"./scenes/Preload\";\r\nimport SceneKey from \"./SceneKey\";\r\nimport SlidingPuzzle from \"./scenes/SlidingPuzzle\";\r\n\r\nexport const gameCongig: Phaser.Types.Core.GameConfig = {\r\n  type: Phaser.AUTO,\r\n  width: 1280,\r\n  height: 720,\r\n  parent: \"game\",\r\n  scale: {\r\n    mode: Phaser.Scale.ScaleModes.FIT,\r\n    autoCenter: Phaser.Scale.Center.CENTER_HORIZONTALLY,\r\n    parent: \"game\",\r\n    zoom: Phaser.Scale.Zoom.MAX_ZOOM,\r\n  },\r\n};\r\n\r\nexport default class SlidingPuzzleGame extends Phaser.Game {\r\n  constructor() {\r\n    super({\r\n      ...gameCongig,\r\n      backgroundColor: \"#000000\",\r\n    });\r\n    this.scene.add(SceneKey.PRELOAD, Preload);\r\n    this.scene.add(SceneKey.SLIDING_PUZZLE, SlidingPuzzle);\r\n\r\n    this.scene.start(SceneKey.PRELOAD, {\r\n      nextSceneKey: SceneKey.SLIDING_PUZZLE,\r\n    });\r\n  }\r\n}\r\n","import \"../node_modules/spectre.css/dist/spectre.min.css\";\nimport \"../node_modules/spectre.css/dist/spectre-exp.min.css\";\nimport \"../node_modules/spectre.css/dist/spectre-icons.min.css\";\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport SlidingPuzzleGame from \"./phaser/SlidingPuzzleGame\";\n\nfunction App() {\n  const [state, setState] = useState<SlidingPuzzleGame>();\n  useEffect(() => {\n    const game = new SlidingPuzzleGame();\n    setState(game);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"navbar\">\n        <section className=\"navbar-section\">\n          <a className=\"navbar-brand mr-2\">\n            Sliding Puzzle\n          </a>\n          <a\n            href=\"https://kaminoctem.com/games/sliding-puzzle\"\n            className=\"btn btn-link\"\n          >\n            <i className=\"icon icon-link\"></i>Original\n          </a>\n          <a\n            href=\"https://github.com/kaminoctem/sliding-puzzle\"\n            className=\"btn btn-link\"\n          >\n            <i className=\"icon icon-link\"></i>GitHub\n          </a>\n        </section>\n        <section className=\"navbar-section\"></section>\n      </header>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <div className=\"p-centered\">\n              <div id=\"game\" className=\"game\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}